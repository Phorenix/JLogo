package it.unicam.cs.pa.jlogo.gui;

import it.unicam.cs.pa.jlogo.api.LogoController;
import it.unicam.cs.pa.jlogo.api.io.InvalidNumberArgumentsException;
import it.unicam.cs.pa.jlogo.api.model.shapes.SimpleDrawing;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextInputDialog;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.stage.FileChooser;
import javafx.event.Event;

import java.io.File;
import java.io.IOException;
import java.util.Optional;

/**
 * Java FX controller to control the operations on the graphic interface (of the fxml file)
 *
 * @author Luca Bianchi
 */
public class JLogoAppController {

    private double width;

    private double height;

    @FXML
    private AnchorPane areaDrawing;

    @FXML
    private Button openButton;

    @FXML
    private Button clearButton;

    @FXML
    private Button nextStepButton;

    @FXML
    private Button executeAllButton;

    private LogoController controller;

    private boolean loadedFile = false;

    public void initialize() {
        askDimensionDialogs();
        controller = new LogoController(new GuiDrawing(), width, height);
    }

    /**
     * This method asks for the file from which read the commands and then calls the method of the logo controller
     * to read those commands
     *
     * @param event generated by pressing the "open button"
     */
    @FXML
    private void clickOpenButton(Event event) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Open Logo Commands File");
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Logo Files", "*.logo"),
                new FileChooser.ExtensionFilter("Txt Files", "*.txt"),
                new FileChooser.ExtensionFilter("All Files", "*.*"));
        File selectedFile = fileChooser.showOpenDialog(((Node) event.getSource()).getScene().getWindow());
        if (selectedFile != null) {
            try {
                controller.readCommandsFromFile(selectedFile);
                loadedFile = true;
            } catch (IOException e) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error...");
                alert.setHeaderText(e.getMessage());
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    /**
     * This method clears the drawing and the reset the list of commands
     *
     * @param event generated by pressing the "clear button"
     */
    @FXML
    private void clickClearButton(Event event) {
        if (loadedFile) this.controller.clear();
    }

    /**
     * This method executes the next command in the list of commands read from the file
     *
     * @param event generated by pressing the "next button"
     */
    @FXML
    private synchronized void clickNextButton(Event event) {
        if (loadedFile) controller.executeNextCommand();
    }

    /**
     * This method executes all the commands in the list of commands read from the file
     *
     * @param event generated by pressing the "end button"
     */
    @FXML
    private synchronized void clickEndButton(Event event) {
        if (loadedFile) controller.executeAllCommands();
    }

    /**
     * Only steps forward if the pressed key is space or up or right
     *
     * @param event generated by pressing a key button
     */
    @FXML
    private synchronized void onKeyPressed(KeyEvent event) {
        if (loadedFile)
            if (event.getCode() == KeyCode.SPACE || event.getCode() == KeyCode.RIGHT || event.getCode() == KeyCode.UP)
                controller.executeNextCommand();
    }

    /**
     * This utility method asks for the dimensions of the "drawing" (not the stage or scene)
     */
    private void askDimensionDialogs() {
        TextInputDialog dialog = new TextInputDialog("");
        dialog.setTitle("Dimension Dialog");
        dialog.setHeaderText("Inserire la larghezza del foglio di disegno");
        dialog.setContentText("Dimensione X: ");

        Optional<String> result = dialog.showAndWait();
        result.ifPresent(dimX -> this.width = Integer.parseInt(dimX));

        dialog.setHeaderText("Inserire l'altezza del foglio di disegno");
        dialog.setContentText("Dimensione Y: ");

        result = dialog.showAndWait();
        result.ifPresent(dimY -> this.height = Integer.parseInt(dimY));
    }
}
